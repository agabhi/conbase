<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:resources mapping="/assets/**" location="/WEB-INF/assets/" />
	
	<mvc:interceptors>
		<bean class="org.springframework.mobile.device.DeviceResolverHandlerInterceptor" />
		<bean id="webContentInterceptor" class="org.springframework.web.servlet.mvc.WebContentInterceptor">
			<property name="cacheSeconds" value="0" />
			<property name="useExpiresHeader" value="true" />
			<property name="useCacheControlHeader" value="true" />
			<property name="useCacheControlNoStore" value="true" />
			<property name="cacheMappings">
          		<props>
            		<prop key="/assets/js/custom/**">1</prop>
            		<prop key="/assets/css/custom/**">1</prop>
            		<prop key="/assets/**">86400</prop>
            	</props>
        	</property>
		</bean>
		<bean id="localeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
		<bean id="sessionManagementInterceptor" class="com.derive.conbase.interceptor.SessionManagementInterceptor"/>
	</mvc:interceptors>


	<!-- Implementation of LocaleResolver that uses a locale attribute in the 
		user's session in case of a custom setting, with a fallback to the specified 
		default locale or the request's accept-header locale. This is most appropriate 
		if the application needs user sessions anyway, that is, when the HttpSession 
		does not have to be created for the locale. Custom controllers can override 
		the user's locale by calling setLocale, e.g. responding to a locale change 
		request. -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="en" />
	</bean>

	<!-- Application Message Bundle -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:messages/ApplicationMessages</value>
				<value>classpath:messages/ScreenLabels</value>
			</list>
		</property>
	    <property name="cacheSeconds" value="1" />
	</bean>
		
</beans>
